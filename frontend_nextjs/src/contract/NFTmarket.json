{
  "address": "0x8bE52C2c3fdd5F1d517F47E9ddb7AB2c624c2c9B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_marketFeePercent",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NFTmarket__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__CollectionAlreadyCreated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__CollectionNotCreated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__NoBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__NotApprovedBySeller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__NotMarketOwnerOrSeller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__NotNftOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__PriceNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__SentOwnerFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__SentUserFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTmarket__SentWrongValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "BoughtNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "royaltyPercent",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "collectionURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "CreatedCollection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "DeletedCollection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "DeletedListing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ListedNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "MarketOwnerWithdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "royaltyPercent",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "collectionURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "UpdatedCollection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "UpdatedListingPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "UserWithdrew",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyAddr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_royaltyPercent",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_collectionURI",
          "type": "string"
        }
      ],
      "name": "createCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContractAddr",
          "type": "address"
        }
      ],
      "name": "deleteCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deleteListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        }
      ],
      "name": "getCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketFeeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserProceed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketFeePercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyAddr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_royaltyPercent",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_collectionURI",
          "type": "string"
        }
      ],
      "name": "updateCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_marketFeePercent",
          "type": "uint8"
        }
      ],
      "name": "updateMarketFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usersWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x79fa829b7b7cd38dd251ea208b700421536da614429ca1e5efe93369f2826db5",
  "receipt": {
    "to": null,
    "from": "0xC8e5a1d3ADfF41B662aaf834BA11B95660A6c86b",
    "contractAddress": "0x8bE52C2c3fdd5F1d517F47E9ddb7AB2c624c2c9B",
    "transactionIndex": 1,
    "gasUsed": "2647514",
    "logsBloom": "0x
    "blockHash": "0x6953c9926d18da541ec333241d05876d91d19110c1335e19deeb3ddb3545c312",
    "transactionHash": "0x79fa829b7b7cd38dd251ea208b700421536da614429ca1e5efe93369f2826db5",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 33639069,
        "transactionHash": "0x79fa829b7b7cd38dd251ea208b700421536da614429ca1e5efe93369f2826db5",
        "address": "0x8bE52C2c3fdd5F1d517F47E9ddb7AB2c624c2c9B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c8e5a1d3adff41b662aaf834ba11b95660a6c86b"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x6953c9926d18da541ec333241d05876d91d19110c1335e19deeb3ddb3545c312"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 33639069,
        "transactionHash": "0x79fa829b7b7cd38dd251ea208b700421536da614429ca1e5efe93369f2826db5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c8e5a1d3adff41b662aaf834ba11b95660a6c86b",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f8508f12552da00000000000000000000000000000000000000000000000004ceef8869abfdd4000000000000000000000000000000000000000000001cd353c49fd63ece18ad00000000000000000000000000000000000000000000000004bf6a7f7886aafa000000000000000000000000000000000000000000001cd353d424df2ff36b87",
        "logIndex": 4,
        "blockHash": "0x6953c9926d18da541ec333241d05876d91d19110c1335e19deeb3ddb3545c312"
      }
    ],
    "blockNumber": 33639069,
    "cumulativeGasUsed": "2729221",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2
  ],
  "numDeployments": 2,
  "solcInputHash": "9849d29e9d45dd1167b5d15719e356ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_marketFeePercent\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFTmarket__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__CollectionAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__CollectionNotCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__NoBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__NotApprovedBySeller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__NotMarketOwnerOrSeller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__NotNftOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__PriceNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__SentOwnerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__SentUserFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTmarket__SentWrongValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BoughtNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"royaltyPercent\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectionURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"CreatedCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DeletedCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DeletedListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ListedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MarketOwnerWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"royaltyPercent\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectionURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UpdatedCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UpdatedListingPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UserWithdrew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_royaltyPercent\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_collectionURI\",\"type\":\"string\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddr\",\"type\":\"address\"}],\"name\":\"deleteCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"}],\"name\":\"getCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserProceed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_royaltyPercent\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_collectionURI\",\"type\":\"string\"}],\"name\":\"updateCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_marketFeePercent\",\"type\":\"uint8\"}],\"name\":\"updateMarketFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTmarket.sol\":\"NFTmarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTmarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract NFTmarket is Ownable, ReentrancyGuard {\\n    struct Listing {\\n        address seller;\\n        uint256 price;\\n    }\\n    struct Collection {\\n        address royaltyAddr;\\n        uint8 royaltyPercent;\\n        string collectionURI;\\n    }\\n\\n    uint8 public marketFeePercent;\\n    uint256 private marketFeeBalance;\\n    //sellers and royalty owners to their proceeds\\n    mapping(address => uint256) private usersProceeds;\\n    //nft contract address to token id to Listing\\n    mapping(address => mapping(uint256 => Listing)) private listings;\\n    //nft contract address to Collection\\n    mapping(address => Collection) private collections;\\n\\n    event MarketOwnerWithdrew(\\n        address indexed owner,\\n        uint256 amount,\\n        uint256 time\\n    );\\n    event UserWithdrew(address indexed user, uint256 amount, uint256 time);\\n    event CreatedCollection(\\n        address indexed nftContractAddr,\\n        address indexed royaltyAddr,\\n        uint8 royaltyPercent,\\n        string collectionURI,\\n        address indexed marketOwner,\\n        uint256 time\\n    );\\n    event UpdatedCollection(\\n        address indexed nftContractAddr,\\n        address indexed royaltyAddr,\\n        uint8 royaltyPercent,\\n        string collectionURI,\\n        address indexed marketOwner,\\n        uint256 time\\n    );\\n    event DeletedCollection(\\n        address indexed nftContractAddr,\\n        address indexed marketOwner,\\n        uint256 time\\n    );\\n    event ListedNFT(\\n        address indexed nftContractAddr,\\n        uint256 indexed tokenId,\\n        address indexed seller,\\n        uint256 price,\\n        uint256 time\\n    );\\n    event UpdatedListingPrice(\\n        address indexed nftContractAddr,\\n        uint256 indexed tokenId,\\n        uint256 newPrice,\\n        uint256 time\\n    );\\n    event DeletedListing(\\n        address indexed nftContractAddr,\\n        uint256 indexed tokenId,\\n        uint256 time\\n    );\\n    event BoughtNFT(\\n        address indexed nftContractAddr,\\n        uint256 indexed tokenId,\\n        address indexed buyer,\\n        address seller,\\n        uint256 price,\\n        uint256 time\\n    );\\n\\n    error NFTmarket__NotNftOwner();\\n    error NFTmarket__NotMarketOwnerOrSeller();\\n    error NFTmarket__NotApprovedBySeller();\\n    error NFTmarket__PriceNotValid();\\n    error NFTmarket__CollectionAlreadyCreated();\\n    error NFTmarket__CollectionNotCreated();\\n    error NFTmarket__AlreadyListed();\\n    error NFTmarket__NotListed();\\n    error NFTmarket__SentWrongValue();\\n    error NFTmarket__SentOwnerFailed();\\n    error NFTmarket__SentUserFailed();\\n    error NFTmarket__NoBalance();\\n    error NFTmarket__NotEnoughBalance();\\n\\n    modifier ownedBySeller(address nftContractAddr, uint256 tokenId) {\\n        address nftOwner = IERC721(nftContractAddr).ownerOf(tokenId);\\n        if (nftOwner != msg.sender) {\\n            revert NFTmarket__NotNftOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier marketOwnerOrSeller(address nftContractAddr, uint256 tokenId) {\\n        address seller = listings[nftContractAddr][tokenId].seller;\\n        if (msg.sender != seller && msg.sender != owner()) {\\n            revert NFTmarket__NotMarketOwnerOrSeller();\\n        }\\n        _;\\n    }\\n\\n    modifier notListed(address nftContractAddr, uint256 tokenId) {\\n        if (listings[nftContractAddr][tokenId].price > 0) {\\n            revert NFTmarket__AlreadyListed();\\n        }\\n        _;\\n    }\\n\\n    modifier isListed(address nftContractAddr, uint256 tokenId) {\\n        if (listings[nftContractAddr][tokenId].price <= 0) {\\n            revert NFTmarket__NotListed();\\n        }\\n        _;\\n    }\\n\\n    modifier notCreated(address nftContractAddr) {\\n        if (collections[nftContractAddr].royaltyAddr != address(0)) {\\n            revert NFTmarket__CollectionAlreadyCreated();\\n        }\\n        _;\\n    }\\n\\n    modifier isCreated(address nftContractAddr) {\\n        if (collections[nftContractAddr].royaltyAddr == address(0)) {\\n            revert NFTmarket__CollectionNotCreated();\\n        }\\n        _;\\n    }\\n\\n    constructor(uint8 _marketFeePercent) {\\n        marketFeePercent = _marketFeePercent;\\n    }\\n\\n    function updateMarketFee(uint8 _marketFeePercent) external onlyOwner {\\n        marketFeePercent = _marketFeePercent;\\n    }\\n\\n    //temporarily coded the function to the market owner\\n    function createCollection(\\n        address _nftContractAddr,\\n        address _royaltyAddr,\\n        uint8 _royaltyPercent,\\n        string calldata _collectionURI\\n    ) external onlyOwner notCreated(_nftContractAddr) {\\n        collections[_nftContractAddr].royaltyAddr = _royaltyAddr;\\n        collections[_nftContractAddr].royaltyPercent = _royaltyPercent;\\n        collections[_nftContractAddr].collectionURI = _collectionURI;\\n        emit CreatedCollection(\\n            _nftContractAddr,\\n            _royaltyAddr,\\n            _royaltyPercent,\\n            _collectionURI,\\n            msg.sender,\\n            block.timestamp\\n        );\\n    }\\n\\n    //temporarily coded the function to the market owner\\n    function updateCollection(\\n        address _nftContractAddr,\\n        address _royaltyAddr,\\n        uint8 _royaltyPercent,\\n        string calldata _collectionURI\\n    ) external onlyOwner isCreated(_nftContractAddr) {\\n        collections[_nftContractAddr].royaltyAddr = _royaltyAddr;\\n        collections[_nftContractAddr].royaltyPercent = _royaltyPercent;\\n        collections[_nftContractAddr].collectionURI = _collectionURI;\\n        emit UpdatedCollection(\\n            _nftContractAddr,\\n            _royaltyAddr,\\n            _royaltyPercent,\\n            _collectionURI,\\n            msg.sender,\\n            block.timestamp\\n        );\\n    }\\n\\n    //temporarily coded the function to the market owner\\n    function deleteCollection(\\n        address _nftContractAddr\\n    ) external onlyOwner isCreated(_nftContractAddr) {\\n        delete collections[_nftContractAddr];\\n        emit DeletedCollection(_nftContractAddr, msg.sender, block.timestamp);\\n    }\\n\\n    //seller must own the NFT; only seller can list his/her NFT\\n    function listNFT(\\n        address nftContractAddr,\\n        uint256 tokenId,\\n        uint256 price\\n    )\\n        external\\n        ownedBySeller(nftContractAddr, tokenId)\\n        notListed(nftContractAddr, tokenId)\\n    {\\n        if (price <= 0) {\\n            revert NFTmarket__PriceNotValid();\\n        }\\n        if (IERC721(nftContractAddr).getApproved(tokenId) != address(this)) {\\n            revert NFTmarket__NotApprovedBySeller();\\n        }\\n        listings[nftContractAddr][tokenId].seller = msg.sender;\\n        listings[nftContractAddr][tokenId].price = price;\\n        // or\\n        //listings[nftContractAddr][tokenId] = Listing(msg.sender, price);\\n        emit ListedNFT(\\n            nftContractAddr,\\n            tokenId,\\n            msg.sender,\\n            price,\\n            block.timestamp\\n        );\\n    }\\n\\n    function buyNFT(\\n        address nftContractAddr,\\n        uint256 tokenId\\n    ) external payable isListed(nftContractAddr, tokenId) nonReentrant {\\n        Listing memory listing = listings[nftContractAddr][tokenId];\\n        address seller = listing.seller;\\n        uint256 price = listing.price;\\n        uint8 royaltyPercent = collections[nftContractAddr].royaltyPercent;\\n        address royaltyAddress = collections[nftContractAddr].royaltyAddr;\\n        uint256 marketFee = (price * marketFeePercent) / 100;\\n        uint256 royalty = (price * royaltyPercent) / 100;\\n        uint256 requiredPayment = price + marketFee + royalty;\\n        if (requiredPayment != msg.value) {\\n            revert NFTmarket__SentWrongValue();\\n        }\\n        delete listings[nftContractAddr][tokenId];\\n        marketFeeBalance += marketFee;\\n        usersProceeds[seller] += price;\\n        if (royaltyAddress != address(0) && royalty != 0) {\\n            usersProceeds[royaltyAddress] += royalty;\\n        }\\n        IERC721(nftContractAddr).safeTransferFrom(seller, msg.sender, tokenId);\\n        emit BoughtNFT(\\n            nftContractAddr,\\n            tokenId,\\n            msg.sender,\\n            seller,\\n            price,\\n            block.timestamp\\n        );\\n    }\\n\\n    //seller must own the NFT; only seller can update the listing price of his/her NFT\\n    function updateListingPrice(\\n        address nftContractAddr,\\n        uint256 tokenId,\\n        uint256 newPrice\\n    )\\n        external\\n        isListed(nftContractAddr, tokenId)\\n        ownedBySeller(nftContractAddr, tokenId)\\n    {\\n        if (newPrice <= 0) {\\n            revert NFTmarket__PriceNotValid();\\n        }\\n        listings[nftContractAddr][tokenId].price = newPrice;\\n        emit UpdatedListingPrice(\\n            nftContractAddr,\\n            tokenId,\\n            newPrice,\\n            block.timestamp\\n        );\\n    }\\n\\n    //both seller and market contract owner can delete a listing\\n    function deleteListing(\\n        address nftContractAddr,\\n        uint256 tokenId\\n    )\\n        external\\n        isListed(nftContractAddr, tokenId)\\n        marketOwnerOrSeller(nftContractAddr, tokenId)\\n    {\\n        delete listings[nftContractAddr][tokenId];\\n        emit DeletedListing(nftContractAddr, tokenId, block.timestamp);\\n    }\\n\\n    function usersWithdraw() external nonReentrant {\\n        uint256 otherBalance = usersProceeds[msg.sender];\\n        if (otherBalance <= 0) revert NFTmarket__NoBalance();\\n        usersProceeds[msg.sender] = 0;\\n        (bool sentOther, ) = payable(msg.sender).call{value: otherBalance}(\\\"\\\");\\n        if (!sentOther) {\\n            revert NFTmarket__SentUserFailed();\\n        }\\n        emit UserWithdrew(msg.sender, otherBalance, block.timestamp);\\n    }\\n\\n    function ownerWithdrawFee(uint256 withdrawAmount) external onlyOwner {\\n        if (withdrawAmount > marketFeeBalance) {\\n            revert NFTmarket__NotEnoughBalance();\\n        }\\n        marketFeeBalance -= withdrawAmount;\\n        (bool sentOwner, ) = payable(msg.sender).call{value: withdrawAmount}(\\n            \\\"\\\"\\n        );\\n        if (!sentOwner) {\\n            revert NFTmarket__SentOwnerFailed();\\n        }\\n        emit MarketOwnerWithdrew(msg.sender, withdrawAmount, block.timestamp);\\n    }\\n\\n    function getListing(\\n        address nftContractAddr,\\n        uint256 tokenId\\n    ) external view returns (address, uint256) {\\n        Listing memory listing = listings[nftContractAddr][tokenId];\\n        return (listing.seller, listing.price);\\n    }\\n\\n    function getCollection(\\n        address nftContractAddr\\n    ) external view returns (address, uint8, string memory) {\\n        Collection memory collection = collections[nftContractAddr];\\n        return (\\n            collection.royaltyAddr,\\n            collection.royaltyPercent,\\n            collection.collectionURI\\n        );\\n    }\\n\\n    function getUserProceed(address user) external view returns (uint256) {\\n        return usersProceeds[user];\\n    }\\n\\n    function getMarketFeeBalance() external view returns (uint256) {\\n        return marketFeeBalance;\\n    }\\n\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x70be72fdc751b285a5b022ae82f99800a950cb4548057e626ca5f6606ff746c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002f9038038062002f9083398181016040528101906200003791906200018f565b620000576200004b6200008060201b60201c565b6200008860201b60201c565b6001808190555080600260006101000a81548160ff021916908360ff16021790555050620001c1565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600060ff82169050919050565b620001698162000151565b81146200017557600080fd5b50565b60008151905062000189816200015e565b92915050565b600060208284031215620001a857620001a76200014c565b5b6000620001b88482850162000178565b91505092915050565b612dbf80620001d16000396000f3fe6080604052600436106101145760003560e01c806388700d1c116100a0578063aaf51b7e11610064578063aaf51b7e14610355578063ad05f1b414610380578063e40de887146103a9578063f2fde38b146103e8578063f7232f671461041157610114565b806388700d1c1461027e5780638da5cb5b146102bc578063a6bb6cac146102e7578063a82ba76f14610310578063a8c95de31461032c57610114565b80634fe5d985116100e75780634fe5d985146101d35780635ad225f3146101fc5780636f9fb98a14610213578063715018a61461023e578063831b627d1461025557610114565b8063105d34ba14610119578063265e8850146101445780632d67d1281461018157806334353e32146101aa575b600080fd5b34801561012557600080fd5b5061012e61043a565b60405161013b91906121fb565b60405180910390f35b34801561015057600080fd5b5061016b6004803603810190610166919061227e565b610444565b60405161017891906121fb565b60405180910390f35b34801561018d57600080fd5b506101a860048036038101906101a391906122d7565b61048d565b005b3480156101b657600080fd5b506101d160048036038101906101cc919061233d565b6105e1565b005b3480156101df57600080fd5b506101fa60048036038101906101f5919061236a565b610607565b005b34801561020857600080fd5b50610211610890565b005b34801561021f57600080fd5b50610228610a5a565b60405161023591906121fb565b60405180910390f35b34801561024a57600080fd5b50610253610a62565b005b34801561026157600080fd5b5061027c6004803603810190610277919061240f565b610a76565b005b34801561028a57600080fd5b506102a560048036038101906102a0919061236a565b610cff565b6040516102b39291906124a6565b60405180910390f35b3480156102c857600080fd5b506102d1610dd7565b6040516102de91906124cf565b60405180910390f35b3480156102f357600080fd5b5061030e6004803603810190610309919061227e565b610e00565b005b61032a6004803603810190610325919061236a565b610fc7565b005b34801561033857600080fd5b50610353600480360381019061034e919061240f565b611505565b005b34801561036157600080fd5b5061036a61178e565b60405161037791906124f9565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a29190612514565b6117a1565b005b3480156103b557600080fd5b506103d060048036038101906103cb919061227e565b611b8a565b6040516103df939291906125f7565b60405180910390f35b3480156103f457600080fd5b5061040f600480360381019061040a919061227e565b611cff565b005b34801561041d57600080fd5b5061043860048036038101906104339190612514565b611d82565b005b6000600354905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610495611fe3565b6003548111156104d1576040517f0cfcf1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008282546104e39190612664565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610510906126c9565b60006040518083038185875af1925050503d806000811461054d576040519150601f19603f3d011682016040523d82523d6000602084013e610552565b606091505b505090508061058d576040517ffe81b9e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f19f37d14fd91b1d4066aaef180765c105ed3184b0a36512bfc996ff2a9bebf3c83426040516105d59291906126de565b60405180910390a25050565b6105e9611fe3565b80600260006101000a81548160ff021916908360ff16021790555050565b81816000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411610696576040517f8539649f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83836000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561077f575061074f610dd7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156107b6576040517fadc8e09e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050858773ffffffffffffffffffffffffffffffffffffffff167fc4435e2925a8b547043940662d73838cc5b892da8bfadaf29b0bd75022f463be4260405161087f91906121fb565b60405180910390a350505050505050565b610898612061565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610916576040517f2c482da200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610981906126c9565b60006040518083038185875af1925050503d80600081146109be576040519150601f19603f3d011682016040523d82523d6000602084013e6109c3565b606091505b50509050806109fe576040517f16f86ed300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f755012e2f452d6e07692ebbac509b615989a2f49c7c41b630e386c5526e6fcf28342604051610a469291906126de565b60405180910390a25050610a586120b0565b565b600047905090565b610a6a611fe3565b610a7460006120b9565b565b610a7e611fe3565b84600073ffffffffffffffffffffffffffffffffffffffff16600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b47576040517f7a19483d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360ff1602179055508282600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019182610c7492919061294d565b503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f3a1ccb1485e4634808e9146d60c62edb070d8d1f1e5717523e2596155b6383d587878742604051610cef9493929190612a59565b60405180910390a4505050505050565b6000806000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090508060000151816020015192509250509250929050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e08611fe3565b80600073ffffffffffffffffffffffffffffffffffffffff16600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ed1576040517f1424751200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff0219169055600182016000610f5c9190612185565b50503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fd455ee898cfcdd19dfa4750fa42353d7553a2d067c63166b56693a20d1566db742604051610fbb91906121fb565b60405180910390a35050565b81816000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411611056576040517f8539649f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61105e612061565b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090506000816000015190506000826020015190506000600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1690506000600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006064600260009054906101000a900460ff1660ff168561120c9190612a99565b6112169190612b0a565b9050600060648460ff168661122b9190612a99565b6112359190612b0a565b905060008183876112469190612b3b565b6112509190612b3b565b905034811461128b576040517f810880a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050826003600082825461131f9190612b3b565b9250508190555085600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113759190612b3b565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156113ba575060008214155b156114165781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461140e9190612b3b565b925050819055505b8b73ffffffffffffffffffffffffffffffffffffffff166342842e0e88338e6040518463ffffffff1660e01b815260040161145393929190612b6f565b600060405180830381600087803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168b8d73ffffffffffffffffffffffffffffffffffffffff167f08b377f96876f657861d4473ec9238f91698ede9abc4de2aa73f87e1b96f808f8a8a426040516114e793929190612ba6565b60405180910390a450505050505050506114ff6120b0565b50505050565b61150d611fe3565b84600073ffffffffffffffffffffffffffffffffffffffff16600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036115d6576040517f1424751200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360ff1602179055508282600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101918261170392919061294d565b503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f7dd6e3d327c24fcc9c3661a684f50815fbe9f99bf4d64672d98c141401d42c188787874260405161177e9493929190612a59565b60405180910390a4505050505050565b600260009054906101000a900460ff1681565b828260008273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016117de91906121fb565b602060405180830381865afa1580156117fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181f9190612bf2565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611886576040517f286b9a3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85856000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600101541115611916576040517f1d8987aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008611611950576040517f2269fd9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1663081812fc896040518263ffffffff1660e01b81526004016119a091906121fb565b602060405180830381865afa1580156119bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e19190612bf2565b73ffffffffffffffffffffffffffffffffffffffff1614611a2e576040517fbd51507400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff16878973ffffffffffffffffffffffffffffffffffffffff167f4b6573714cc13585029697c2a60f19f85084c164e3c857b1eb9f1044d55bedbd8942604051611b789291906126de565b60405180910390a45050505050505050565b60008060606000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff168152602001600182018054611c5e90612770565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8a90612770565b8015611cd75780601f10611cac57610100808354040283529160200191611cd7565b820191906000526020600020905b815481529060010190602001808311611cba57829003601f168201915b5050505050815250509050806000015181602001518260400151935093509350509193909250565b611d07611fe3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6d90612c91565b60405180910390fd5b611d7f816120b9565b50565b82826000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411611e11576040517f8539649f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848460008273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611e4e91906121fb565b602060405180830381865afa158015611e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8f9190612bf2565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611ef6576040517f286b9a3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008611611f30576040517f2269fd9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060010181905550868873ffffffffffffffffffffffffffffffffffffffff167f80afd253c5e11a1922b33b91a631de75be3cac3b5e39fa9ac64f6ea85048fbf88842604051611fd19291906126de565b60405180910390a35050505050505050565b611feb61217d565b73ffffffffffffffffffffffffffffffffffffffff16612009610dd7565b73ffffffffffffffffffffffffffffffffffffffff161461205f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205690612cfd565b60405180910390fd5b565b6002600154036120a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209d90612d69565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b50805461219190612770565b6000825580601f106121a357506121c2565b601f0160209004906000526020600020908101906121c191906121c5565b5b50565b5b808211156121de5760008160009055506001016121c6565b5090565b6000819050919050565b6121f5816121e2565b82525050565b600060208201905061221060008301846121ec565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061224b82612220565b9050919050565b61225b81612240565b811461226657600080fd5b50565b60008135905061227881612252565b92915050565b60006020828403121561229457612293612216565b5b60006122a284828501612269565b91505092915050565b6122b4816121e2565b81146122bf57600080fd5b50565b6000813590506122d1816122ab565b92915050565b6000602082840312156122ed576122ec612216565b5b60006122fb848285016122c2565b91505092915050565b600060ff82169050919050565b61231a81612304565b811461232557600080fd5b50565b60008135905061233781612311565b92915050565b60006020828403121561235357612352612216565b5b600061236184828501612328565b91505092915050565b6000806040838503121561238157612380612216565b5b600061238f85828601612269565b92505060206123a0858286016122c2565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126123cf576123ce6123aa565b5b8235905067ffffffffffffffff8111156123ec576123eb6123af565b5b602083019150836001820283011115612408576124076123b4565b5b9250929050565b60008060008060006080868803121561242b5761242a612216565b5b600061243988828901612269565b955050602061244a88828901612269565b945050604061245b88828901612328565b935050606086013567ffffffffffffffff81111561247c5761247b61221b565b5b612488888289016123b9565b92509250509295509295909350565b6124a081612240565b82525050565b60006040820190506124bb6000830185612497565b6124c860208301846121ec565b9392505050565b60006020820190506124e46000830184612497565b92915050565b6124f381612304565b82525050565b600060208201905061250e60008301846124ea565b92915050565b60008060006060848603121561252d5761252c612216565b5b600061253b86828701612269565b935050602061254c868287016122c2565b925050604061255d868287016122c2565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156125a1578082015181840152602081019050612586565b60008484015250505050565b6000601f19601f8301169050919050565b60006125c982612567565b6125d38185612572565b93506125e3818560208601612583565b6125ec816125ad565b840191505092915050565b600060608201905061260c6000830186612497565b61261960208301856124ea565b818103604083015261262b81846125be565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061266f826121e2565b915061267a836121e2565b925082820390508181111561269257612691612635565b5b92915050565b600081905092915050565b50565b60006126b3600083612698565b91506126be826126a3565b600082019050919050565b60006126d4826126a6565b9150819050919050565b60006040820190506126f360008301856121ec565b61270060208301846121ec565b9392505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061278857607f821691505b60208210810361279b5761279a612741565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826127c6565b61280d86836127c6565b95508019841693508086168417925050509392505050565b6000819050919050565b600061284a612845612840846121e2565b612825565b6121e2565b9050919050565b6000819050919050565b6128648361282f565b61287861287082612851565b8484546127d3565b825550505050565b600090565b61288d612880565b61289881848461285b565b505050565b5b818110156128bc576128b1600082612885565b60018101905061289e565b5050565b601f821115612901576128d2816127a1565b6128db846127b6565b810160208510156128ea578190505b6128fe6128f6856127b6565b83018261289d565b50505b505050565b600082821c905092915050565b600061292460001984600802612906565b1980831691505092915050565b600061293d8383612913565b9150826002028217905092915050565b6129578383612707565b67ffffffffffffffff8111156129705761296f612712565b5b61297a8254612770565b6129858282856128c0565b6000601f8311600181146129b457600084156129a2578287013590505b6129ac8582612931565b865550612a14565b601f1984166129c2866127a1565b60005b828110156129ea578489013582556001820191506020850194506020810190506129c5565b86831015612a075784890135612a03601f891682612913565b8355505b6001600288020188555050505b50505050505050565b82818337600083830152505050565b6000612a388385612572565b9350612a45838584612a1d565b612a4e836125ad565b840190509392505050565b6000606082019050612a6e60008301876124ea565b8181036020830152612a81818587612a2c565b9050612a9060408301846121ec565b95945050505050565b6000612aa4826121e2565b9150612aaf836121e2565b9250828202612abd816121e2565b91508282048414831517612ad457612ad3612635565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b15826121e2565b9150612b20836121e2565b925082612b3057612b2f612adb565b5b828204905092915050565b6000612b46826121e2565b9150612b51836121e2565b9250828201905080821115612b6957612b68612635565b5b92915050565b6000606082019050612b846000830186612497565b612b916020830185612497565b612b9e60408301846121ec565b949350505050565b6000606082019050612bbb6000830186612497565b612bc860208301856121ec565b612bd560408301846121ec565b949350505050565b600081519050612bec81612252565b92915050565b600060208284031215612c0857612c07612216565b5b6000612c1684828501612bdd565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612c7b602683612572565b9150612c8682612c1f565b604082019050919050565b60006020820190508181036000830152612caa81612c6e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612ce7602083612572565b9150612cf282612cb1565b602082019050919050565b60006020820190508181036000830152612d1681612cda565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612d53601f83612572565b9150612d5e82612d1d565b602082019050919050565b60006020820190508181036000830152612d8281612d46565b905091905056fea264697066735822122073d4c3bb65dd818a031edba815179bcfc45d82599bae23ad6651a4d637ac155d64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c806388700d1c116100a0578063aaf51b7e11610064578063aaf51b7e14610355578063ad05f1b414610380578063e40de887146103a9578063f2fde38b146103e8578063f7232f671461041157610114565b806388700d1c1461027e5780638da5cb5b146102bc578063a6bb6cac146102e7578063a82ba76f14610310578063a8c95de31461032c57610114565b80634fe5d985116100e75780634fe5d985146101d35780635ad225f3146101fc5780636f9fb98a14610213578063715018a61461023e578063831b627d1461025557610114565b8063105d34ba14610119578063265e8850146101445780632d67d1281461018157806334353e32146101aa575b600080fd5b34801561012557600080fd5b5061012e61043a565b60405161013b91906121fb565b60405180910390f35b34801561015057600080fd5b5061016b6004803603810190610166919061227e565b610444565b60405161017891906121fb565b60405180910390f35b34801561018d57600080fd5b506101a860048036038101906101a391906122d7565b61048d565b005b3480156101b657600080fd5b506101d160048036038101906101cc919061233d565b6105e1565b005b3480156101df57600080fd5b506101fa60048036038101906101f5919061236a565b610607565b005b34801561020857600080fd5b50610211610890565b005b34801561021f57600080fd5b50610228610a5a565b60405161023591906121fb565b60405180910390f35b34801561024a57600080fd5b50610253610a62565b005b34801561026157600080fd5b5061027c6004803603810190610277919061240f565b610a76565b005b34801561028a57600080fd5b506102a560048036038101906102a0919061236a565b610cff565b6040516102b39291906124a6565b60405180910390f35b3480156102c857600080fd5b506102d1610dd7565b6040516102de91906124cf565b60405180910390f35b3480156102f357600080fd5b5061030e6004803603810190610309919061227e565b610e00565b005b61032a6004803603810190610325919061236a565b610fc7565b005b34801561033857600080fd5b50610353600480360381019061034e919061240f565b611505565b005b34801561036157600080fd5b5061036a61178e565b60405161037791906124f9565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a29190612514565b6117a1565b005b3480156103b557600080fd5b506103d060048036038101906103cb919061227e565b611b8a565b6040516103df939291906125f7565b60405180910390f35b3480156103f457600080fd5b5061040f600480360381019061040a919061227e565b611cff565b005b34801561041d57600080fd5b5061043860048036038101906104339190612514565b611d82565b005b6000600354905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610495611fe3565b6003548111156104d1576040517f0cfcf1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008282546104e39190612664565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610510906126c9565b60006040518083038185875af1925050503d806000811461054d576040519150601f19603f3d011682016040523d82523d6000602084013e610552565b606091505b505090508061058d576040517ffe81b9e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f19f37d14fd91b1d4066aaef180765c105ed3184b0a36512bfc996ff2a9bebf3c83426040516105d59291906126de565b60405180910390a25050565b6105e9611fe3565b80600260006101000a81548160ff021916908360ff16021790555050565b81816000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411610696576040517f8539649f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83836000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561077f575061074f610dd7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156107b6576040517fadc8e09e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050858773ffffffffffffffffffffffffffffffffffffffff167fc4435e2925a8b547043940662d73838cc5b892da8bfadaf29b0bd75022f463be4260405161087f91906121fb565b60405180910390a350505050505050565b610898612061565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610916576040517f2c482da200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610981906126c9565b60006040518083038185875af1925050503d80600081146109be576040519150601f19603f3d011682016040523d82523d6000602084013e6109c3565b606091505b50509050806109fe576040517f16f86ed300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f755012e2f452d6e07692ebbac509b615989a2f49c7c41b630e386c5526e6fcf28342604051610a469291906126de565b60405180910390a25050610a586120b0565b565b600047905090565b610a6a611fe3565b610a7460006120b9565b565b610a7e611fe3565b84600073ffffffffffffffffffffffffffffffffffffffff16600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b47576040517f7a19483d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360ff1602179055508282600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019182610c7492919061294d565b503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f3a1ccb1485e4634808e9146d60c62edb070d8d1f1e5717523e2596155b6383d587878742604051610cef9493929190612a59565b60405180910390a4505050505050565b6000806000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090508060000151816020015192509250509250929050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e08611fe3565b80600073ffffffffffffffffffffffffffffffffffffffff16600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ed1576040517f1424751200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff0219169055600182016000610f5c9190612185565b50503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fd455ee898cfcdd19dfa4750fa42353d7553a2d067c63166b56693a20d1566db742604051610fbb91906121fb565b60405180910390a35050565b81816000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411611056576040517f8539649f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61105e612061565b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090506000816000015190506000826020015190506000600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1690506000600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006064600260009054906101000a900460ff1660ff168561120c9190612a99565b6112169190612b0a565b9050600060648460ff168661122b9190612a99565b6112359190612b0a565b905060008183876112469190612b3b565b6112509190612b3b565b905034811461128b576040517f810880a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050826003600082825461131f9190612b3b565b9250508190555085600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113759190612b3b565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156113ba575060008214155b156114165781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461140e9190612b3b565b925050819055505b8b73ffffffffffffffffffffffffffffffffffffffff166342842e0e88338e6040518463ffffffff1660e01b815260040161145393929190612b6f565b600060405180830381600087803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168b8d73ffffffffffffffffffffffffffffffffffffffff167f08b377f96876f657861d4473ec9238f91698ede9abc4de2aa73f87e1b96f808f8a8a426040516114e793929190612ba6565b60405180910390a450505050505050506114ff6120b0565b50505050565b61150d611fe3565b84600073ffffffffffffffffffffffffffffffffffffffff16600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036115d6576040517f1424751200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360ff1602179055508282600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101918261170392919061294d565b503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f7dd6e3d327c24fcc9c3661a684f50815fbe9f99bf4d64672d98c141401d42c188787874260405161177e9493929190612a59565b60405180910390a4505050505050565b600260009054906101000a900460ff1681565b828260008273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016117de91906121fb565b602060405180830381865afa1580156117fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181f9190612bf2565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611886576040517f286b9a3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85856000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600101541115611916576040517f1d8987aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008611611950576040517f2269fd9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1663081812fc896040518263ffffffff1660e01b81526004016119a091906121fb565b602060405180830381865afa1580156119bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e19190612bf2565b73ffffffffffffffffffffffffffffffffffffffff1614611a2e576040517fbd51507400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff16878973ffffffffffffffffffffffffffffffffffffffff167f4b6573714cc13585029697c2a60f19f85084c164e3c857b1eb9f1044d55bedbd8942604051611b789291906126de565b60405180910390a45050505050505050565b60008060606000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff168152602001600182018054611c5e90612770565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8a90612770565b8015611cd75780601f10611cac57610100808354040283529160200191611cd7565b820191906000526020600020905b815481529060010190602001808311611cba57829003601f168201915b5050505050815250509050806000015181602001518260400151935093509350509193909250565b611d07611fe3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6d90612c91565b60405180910390fd5b611d7f816120b9565b50565b82826000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411611e11576040517f8539649f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848460008273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611e4e91906121fb565b602060405180830381865afa158015611e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8f9190612bf2565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611ef6576040517f286b9a3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008611611f30576040517f2269fd9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060010181905550868873ffffffffffffffffffffffffffffffffffffffff167f80afd253c5e11a1922b33b91a631de75be3cac3b5e39fa9ac64f6ea85048fbf88842604051611fd19291906126de565b60405180910390a35050505050505050565b611feb61217d565b73ffffffffffffffffffffffffffffffffffffffff16612009610dd7565b73ffffffffffffffffffffffffffffffffffffffff161461205f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205690612cfd565b60405180910390fd5b565b6002600154036120a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209d90612d69565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b50805461219190612770565b6000825580601f106121a357506121c2565b601f0160209004906000526020600020908101906121c191906121c5565b5b50565b5b808211156121de5760008160009055506001016121c6565b5090565b6000819050919050565b6121f5816121e2565b82525050565b600060208201905061221060008301846121ec565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061224b82612220565b9050919050565b61225b81612240565b811461226657600080fd5b50565b60008135905061227881612252565b92915050565b60006020828403121561229457612293612216565b5b60006122a284828501612269565b91505092915050565b6122b4816121e2565b81146122bf57600080fd5b50565b6000813590506122d1816122ab565b92915050565b6000602082840312156122ed576122ec612216565b5b60006122fb848285016122c2565b91505092915050565b600060ff82169050919050565b61231a81612304565b811461232557600080fd5b50565b60008135905061233781612311565b92915050565b60006020828403121561235357612352612216565b5b600061236184828501612328565b91505092915050565b6000806040838503121561238157612380612216565b5b600061238f85828601612269565b92505060206123a0858286016122c2565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126123cf576123ce6123aa565b5b8235905067ffffffffffffffff8111156123ec576123eb6123af565b5b602083019150836001820283011115612408576124076123b4565b5b9250929050565b60008060008060006080868803121561242b5761242a612216565b5b600061243988828901612269565b955050602061244a88828901612269565b945050604061245b88828901612328565b935050606086013567ffffffffffffffff81111561247c5761247b61221b565b5b612488888289016123b9565b92509250509295509295909350565b6124a081612240565b82525050565b60006040820190506124bb6000830185612497565b6124c860208301846121ec565b9392505050565b60006020820190506124e46000830184612497565b92915050565b6124f381612304565b82525050565b600060208201905061250e60008301846124ea565b92915050565b60008060006060848603121561252d5761252c612216565b5b600061253b86828701612269565b935050602061254c868287016122c2565b925050604061255d868287016122c2565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156125a1578082015181840152602081019050612586565b60008484015250505050565b6000601f19601f8301169050919050565b60006125c982612567565b6125d38185612572565b93506125e3818560208601612583565b6125ec816125ad565b840191505092915050565b600060608201905061260c6000830186612497565b61261960208301856124ea565b818103604083015261262b81846125be565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061266f826121e2565b915061267a836121e2565b925082820390508181111561269257612691612635565b5b92915050565b600081905092915050565b50565b60006126b3600083612698565b91506126be826126a3565b600082019050919050565b60006126d4826126a6565b9150819050919050565b60006040820190506126f360008301856121ec565b61270060208301846121ec565b9392505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061278857607f821691505b60208210810361279b5761279a612741565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826127c6565b61280d86836127c6565b95508019841693508086168417925050509392505050565b6000819050919050565b600061284a612845612840846121e2565b612825565b6121e2565b9050919050565b6000819050919050565b6128648361282f565b61287861287082612851565b8484546127d3565b825550505050565b600090565b61288d612880565b61289881848461285b565b505050565b5b818110156128bc576128b1600082612885565b60018101905061289e565b5050565b601f821115612901576128d2816127a1565b6128db846127b6565b810160208510156128ea578190505b6128fe6128f6856127b6565b83018261289d565b50505b505050565b600082821c905092915050565b600061292460001984600802612906565b1980831691505092915050565b600061293d8383612913565b9150826002028217905092915050565b6129578383612707565b67ffffffffffffffff8111156129705761296f612712565b5b61297a8254612770565b6129858282856128c0565b6000601f8311600181146129b457600084156129a2578287013590505b6129ac8582612931565b865550612a14565b601f1984166129c2866127a1565b60005b828110156129ea578489013582556001820191506020850194506020810190506129c5565b86831015612a075784890135612a03601f891682612913565b8355505b6001600288020188555050505b50505050505050565b82818337600083830152505050565b6000612a388385612572565b9350612a45838584612a1d565b612a4e836125ad565b840190509392505050565b6000606082019050612a6e60008301876124ea565b8181036020830152612a81818587612a2c565b9050612a9060408301846121ec565b95945050505050565b6000612aa4826121e2565b9150612aaf836121e2565b9250828202612abd816121e2565b91508282048414831517612ad457612ad3612635565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b15826121e2565b9150612b20836121e2565b925082612b3057612b2f612adb565b5b828204905092915050565b6000612b46826121e2565b9150612b51836121e2565b9250828201905080821115612b6957612b68612635565b5b92915050565b6000606082019050612b846000830186612497565b612b916020830185612497565b612b9e60408301846121ec565b949350505050565b6000606082019050612bbb6000830186612497565b612bc860208301856121ec565b612bd560408301846121ec565b949350505050565b600081519050612bec81612252565b92915050565b600060208284031215612c0857612c07612216565b5b6000612c1684828501612bdd565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612c7b602683612572565b9150612c8682612c1f565b604082019050919050565b60006020820190508181036000830152612caa81612c6e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612ce7602083612572565b9150612cf282612cb1565b602082019050919050565b60006020820190508181036000830152612d1681612cda565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612d53601f83612572565b9150612d5e82612d1d565b602082019050919050565b60006020820190508181036000830152612d8281612d46565b905091905056fea264697066735822122073d4c3bb65dd818a031edba815179bcfc45d82599bae23ad6651a4d637ac155d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/NFTmarket.sol:NFTmarket",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/NFTmarket.sol:NFTmarket",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3990,
        "contract": "contracts/NFTmarket.sol:NFTmarket",
        "label": "marketFeePercent",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 3992,
        "contract": "contracts/NFTmarket.sol:NFTmarket",
        "label": "marketFeeBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3996,
        "contract": "contracts/NFTmarket.sol:NFTmarket",
        "label": "usersProceeds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4003,
        "contract": "contracts/NFTmarket.sol:NFTmarket",
        "label": "listings",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)3981_storage))"
      },
      {
        "astId": 4008,
        "contract": "contracts/NFTmarket.sol:NFTmarket",
        "label": "collections",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Collection)3988_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)3981_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTmarket.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)3981_storage)"
      },
      "t_mapping(t_address,t_struct(Collection)3988_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NFTmarket.Collection)",
        "numberOfBytes": "32",
        "value": "t_struct(Collection)3988_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)3981_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTmarket.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)3981_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Collection)3988_storage": {
        "encoding": "inplace",
        "label": "struct NFTmarket.Collection",
        "members": [
          {
            "astId": 3983,
            "contract": "contracts/NFTmarket.sol:NFTmarket",
            "label": "royaltyAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3985,
            "contract": "contracts/NFTmarket.sol:NFTmarket",
            "label": "royaltyPercent",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3987,
            "contract": "contracts/NFTmarket.sol:NFTmarket",
            "label": "collectionURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Listing)3981_storage": {
        "encoding": "inplace",
        "label": "struct NFTmarket.Listing",
        "members": [
          {
            "astId": 3978,
            "contract": "contracts/NFTmarket.sol:NFTmarket",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3980,
            "contract": "contracts/NFTmarket.sol:NFTmarket",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}